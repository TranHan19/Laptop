const { connect } = require('../config/connectDB');
const { DataTypes } = require('sequelize');

const modelUser = require('./users.model');
const modelApikey = require('./apiKey.model');
const modelCategory = require('./category.model');
const modelProduct = require('./products.model');
const modelCart = require('./cart.model');
const modelCoupon = require('./counpon.model');
const modelPayment = require('./payments.model');
const modelMessage = require('./message.model');
const modelPreviewProduct = require('./previewProduct.model');
const modelNotication = require('./notication.model');
const modelOtp = require('./otp.model');
const modelBlog = require('./blog.model');

// ========== USER RELATIONSHIPS ==========
// User c√≥ nhi·ªÅu API keys
modelUser.hasMany(modelApikey, {
    foreignKey: 'userId',
    as: 'apiKeys',
});
modelApikey.belongsTo(modelUser, {
    foreignKey: 'userId',
    as: 'user',
});

// User c√≥ nhi·ªÅu Cart items
modelUser.hasMany(modelCart, {
    foreignKey: 'userId',
    as: 'cartItems',
});
modelCart.belongsTo(modelUser, {
    foreignKey: 'userId',
    as: 'user',
});

// User c√≥ nhi·ªÅu Payments
modelUser.hasMany(modelPayment, {
    foreignKey: 'userId',
    as: 'payments',
});
modelPayment.belongsTo(modelUser, {
    foreignKey: 'userId',
    as: 'user',
});

// User c√≥ nhi·ªÅu Messages (c√≥ th·ªÉ l√† tin nh·∫Øn g·ª≠i ho·∫∑c nh·∫≠n)
modelUser.hasMany(modelMessage, {
    foreignKey: 'senderId',
    as: 'sentMessages',
});
modelUser.hasMany(modelMessage, {
    foreignKey: 'receiverId',
    as: 'receivedMessages',
});
modelMessage.belongsTo(modelUser, {
    foreignKey: 'senderId',
    as: 'sender',
});
modelMessage.belongsTo(modelUser, {
    foreignKey: 'receiverId',
    as: 'receiver',
});

// User c√≥ nhi·ªÅu Notifications
modelUser.hasMany(modelNotication, {
    foreignKey: 'userId',
    as: 'notifications',
});
modelNotication.belongsTo(modelUser, {
    foreignKey: 'userId',
    as: 'user',
});

// User c√≥ nhi·ªÅu OTP
modelUser.hasMany(modelOtp, {
    foreignKey: 'userId',
    as: 'otpCodes',
});
modelOtp.belongsTo(modelUser, {
    foreignKey: 'userId',
    as: 'user',
});

// User c√≥ nhi·ªÅu Blogs (n·∫øu user c√≥ th·ªÉ vi·∫øt blog)
modelUser.hasMany(modelBlog, {
    foreignKey: 'authorId',
    as: 'blogs',
});
modelBlog.belongsTo(modelUser, {
    foreignKey: 'authorId',
    as: 'author',
});

// ========== CATEGORY RELATIONSHIPS ==========
// Category c√≥ nhi·ªÅu Products
modelCategory.hasMany(modelProduct, {
    foreignKey: 'categoryId',
    as: 'products',
});
modelProduct.belongsTo(modelCategory, {
    foreignKey: 'categoryId',
    as: 'category',
});

// ========== PRODUCT RELATIONSHIPS ==========
// Product c√≥ nhi·ªÅu Cart items
modelProduct.hasMany(modelCart, {
    foreignKey: 'productId',
    as: 'cartItems',
});
modelCart.belongsTo(modelProduct, {
    foreignKey: 'productId',
    as: 'product',
});

// Product c√≥ nhi·ªÅu Payments (ƒë√£ c√≥)
modelPayment.belongsTo(modelProduct, {
    foreignKey: 'productId',
    as: 'product',
});
modelProduct.hasMany(modelPayment, {
    foreignKey: 'productId',
    as: 'payments',
});

// Product c√≥ nhi·ªÅu Preview Products
modelProduct.hasMany(modelPreviewProduct, {
    foreignKey: 'productId',
    as: 'previews',
});
modelPreviewProduct.belongsTo(modelProduct, {
    foreignKey: 'productId',
    as: 'product',
});

// ========== COUPON RELATIONSHIPS ==========
// Coupon c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nhi·ªÅu Payments
modelCoupon.hasMany(modelPayment, {
    foreignKey: 'couponId',
    as: 'payments',
});
modelPayment.belongsTo(modelCoupon, {
    foreignKey: 'couponId',
    as: 'coupon',
});

// User c√≥ th·ªÉ c√≥ nhi·ªÅu Coupon (n·∫øu coupon ƒë∆∞·ª£c assign cho user)
modelUser.hasMany(modelCoupon, {
    foreignKey: 'userId',
    as: 'coupons',
});
modelCoupon.belongsTo(modelUser, {
    foreignKey: 'userId',
    as: 'user',
});

// ========== MANY-TO-MANY RELATIONSHIPS ==========
// User v√† Product c√≥ quan h·ªá many-to-many qua Cart
// (ƒê√£ thi·∫øt l·∫≠p th√¥ng qua Cart ·ªü tr√™n)

// User v√† Coupon c√≥ th·ªÉ c√≥ quan h·ªá many-to-many n·∫øu c·∫ßn
// (C√≥ th·ªÉ t·∫°o b·∫£ng UserCoupon ri√™ng n·∫øu 1 coupon c√≥ th·ªÉ d√πng cho nhi·ªÅu user)

// H√†m d·ªçn d·∫πp d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
const cleanupInvalidData = async () => {
    try {
        // X√≥a notifications c√≥ userId kh√¥ng t·ªìn t·∫°i trong users
        await connect.query(`
            DELETE n FROM notications n 
            LEFT JOIN users u ON n.userId = u.id 
            WHERE u.id IS NULL AND n.userId IS NOT NULL
        `);

        // X√≥a c√°c b·∫£n ghi kh√°c c√≥ foreign key kh√¥ng h·ª£p l·ªá
        await connect.query(`
            DELETE c FROM carts c 
            LEFT JOIN users u ON c.userId = u.id 
            WHERE u.id IS NULL AND c.userId IS NOT NULL
        `);

        await connect.query(`
            DELETE p FROM payments p 
            LEFT JOIN users u ON p.userId = u.id 
            WHERE u.id IS NULL AND p.userId IS NOT NULL
        `);

        console.log('‚úÖ Cleaned up invalid foreign key data');
    } catch (error) {
        console.log('‚ö†Ô∏è Cleanup warning:', error.message);
    }
};

const sync = async () => {
    try {
        // B∆∞·ªõc 1: D·ªçn d·∫πp d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá tr∆∞·ªõc
        await cleanupInvalidData();

        // B∆∞·ªõc 2: Sync c√°c b·∫£ng parent tr∆∞·ªõc (kh√¥ng c√≥ foreign key)
        await modelUser.sync({ alter: true });
        await modelCategory.sync({ alter: true });

        // B∆∞·ªõc 3: Sync c√°c b·∫£ng c√≥ foreign key theo th·ª© t·ª± dependency
        await modelApikey.sync({ alter: true });
        await modelProduct.sync({ alter: true });
        await modelCoupon.sync({ alter: true });
        await modelCart.sync({ alter: true });
        await modelPayment.sync({ alter: true });
        await modelMessage.sync({ alter: true });
        await modelPreviewProduct.sync({ alter: true });
        await modelNotication.sync({ alter: true });
        await modelOtp.sync({ alter: true });
        await modelBlog.sync({ alter: true });

        // B∆∞·ªõc 4: Sync to√†n b·ªô database v·ªõi relationships
        await connect.sync({ alter: true });

        console.log('‚úÖ Database synced successfully with relationships');
    } catch (error) {
        console.error('‚ùå Error syncing database:', error);

        // Th·ª≠ ph∆∞∆°ng √°n backup: sync m√† kh√¥ng thay ƒë·ªïi c·∫•u tr√∫c
        try {
            console.log('üîÑ Trying fallback sync without alter...');
            await connect.sync({ force: false });
            console.log('‚úÖ Fallback sync completed');
        } catch (fallbackError) {
            console.error('‚ùå Fallback sync also failed:', fallbackError.message);
            throw error;
        }
    }
};

module.exports = sync;
