const { GoogleGenerativeAI } = require('@google/generative-ai');
const genAI = new GoogleGenerativeAI('AIzaSyAQ5PNzmFcr1OeF1fC82Fj8sKb8twCEba0');
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

const product = require('../models/products.model'); // Model Sequelize c·ªßa b·∫°n

// Mapping m·ª•c ƒë√≠ch s·ª≠ d·ª•ng t·ª´ modal
const purposeMapping = {
    gaming: {
        name: 'Ch∆°i Game',
        description: 'Game AAA, FPS cao, streaming',
        requirements: {
            cpu: 'Intel i5/i7 gen 10+ ho·∫∑c AMD Ryzen 5/7',
            gpu: 'GPU r·ªùi RTX 3060/4060+ ho·∫∑c RX 6600+',
            ram: 'RAM 16GB DDR4/DDR5',
            storage: 'SSD NVMe 512GB+',
            display: 'M√†n h√¨nh 120Hz+, ƒë·ªô tr·ªÖ th·∫•p',
            cooling: 'H·ªá th·ªëng t·∫£n nhi·ªát m·∫°nh',
        },
        priorities: ['GPU hi·ªáu nƒÉng cao', 'CPU m·∫°nh', 'RAM ƒë·ªß l·ªõn', 'T·∫£n nhi·ªát t·ªët', 'M√†n h√¨nh cao t·∫ßn s·ªë'],
    },
    office: {
        name: 'VƒÉn Ph√≤ng',
        description: 'Word, Excel, PowerPoint, Email',
        requirements: {
            cpu: 'Intel i3/i5 ho·∫∑c AMD Ryzen 3/5',
            gpu: 'GPU t√≠ch h·ª£p ƒë√£ ƒë·ªß',
            ram: 'RAM 8-16GB',
            storage: 'SSD 256GB+',
            display: 'M√†n h√¨nh Full HD, ch·ªëng ch√≥i',
            battery: 'Pin 6-8 ti·∫øng s·ª≠ d·ª•ng',
        },
        priorities: ['Th·ªùi l∆∞·ª£ng pin', 'Tr·ªçng l∆∞·ª£ng nh·∫π', 'Gi√° c·∫£ h·ª£p l√Ω', 'ƒê·ªô b·ªÅn', 'M√†n h√¨nh r√µ n√©t'],
    },
    design: {
        name: 'Thi·∫øt K·∫ø ƒê·ªì H·ªça',
        description: 'Photoshop, Illustrator, Figma',
        requirements: {
            cpu: 'Intel i7/i9 ho·∫∑c AMD Ryzen 7/9',
            gpu: 'GPU r·ªùi RTX 3070+ ho·∫∑c RX 6700XT+',
            ram: 'RAM 16-32GB',
            storage: 'SSD NVMe 1TB+',
            display: 'M√†n h√¨nh 4K ho·∫∑c 2K, ƒë·ªô ch√≠nh x√°c m√†u cao',
            color: '100% sRGB, Adobe RGB',
        },
        priorities: ['Ch·∫•t l∆∞·ª£ng m√†n h√¨nh', 'GPU m·∫°nh', 'RAM l·ªõn', 'CPU ƒëa nh√¢n', 'Kh√¥ng gian l∆∞u tr·ªØ'],
    },
    video: {
        name: 'D·ª±ng Video',
        description: 'Premiere, After Effects, DaVinci',
        requirements: {
            cpu: 'Intel i7/i9 ho·∫∑c AMD Ryzen 7/9',
            gpu: 'GPU r·ªùi RTX 4070+ v·ªõi VRAM 12GB+',
            ram: 'RAM 32GB+ DDR4/DDR5',
            storage: 'SSD NVMe 1TB+ t·ªëc ƒë·ªô cao',
            display: 'M√†n h√¨nh 4K, ƒë·ªô ch√≠nh x√°c m√†u cao',
            cooling: 'T·∫£n nhi·ªát m·∫°nh cho workload n·∫∑ng',
        },
        priorities: ['CPU ƒëa nh√¢n m·∫°nh', 'RAM si√™u l·ªõn', 'GPU VRAM cao', 'SSD t·ªëc ƒë·ªô cao', 'T·∫£n nhi·ªát xu·∫•t s·∫Øc'],
    },
    coding: {
        name: 'L·∫≠p Tr√¨nh',
        description: 'VS Code, Database, Server',
        requirements: {
            cpu: 'Intel i5/i7 ho·∫∑c AMD Ryzen 5/7',
            gpu: 'GPU t√≠ch h·ª£p ƒë·ªß d√πng',
            ram: 'RAM 16GB+',
            storage: 'SSD NVMe 512GB+',
            display: 'M√†n h√¨nh Full HD+, kh√¥ng nh·∫•p nh√°y',
            keyboard: 'B√†n ph√≠m t·ªët, g√µ √™m',
        },
        priorities: ['CPU ·ªïn ƒë·ªãnh', 'RAM ƒë·ªß l·ªõn', 'SSD nhanh', 'M√†n h√¨nh kh√¥ng m·ªèi m·∫Øt', 'B√†n ph√≠m ch·∫•t l∆∞·ª£ng'],
    },
    student: {
        name: 'H·ªçc T·∫≠p',
        description: 'Nghi√™n c·ª©u, h·ªçc online, gi·∫£i tr√≠',
        requirements: {
            cpu: 'Intel i3/i5 ho·∫∑c AMD Ryzen 3/5',
            gpu: 'GPU t√≠ch h·ª£p',
            ram: 'RAM 8-16GB',
            storage: 'SSD 256-512GB',
            display: 'M√†n h√¨nh Full HD, b·∫£o v·ªá m·∫Øt',
            battery: 'Pin 6-10 ti·∫øng',
        },
        priorities: ['Gi√° c·∫£ ph·∫£i chƒÉng', 'Pin l√¢u', 'Tr·ªçng l∆∞·ª£ng nh·∫π', 'ƒê·ªô b·ªÅn t·ªët', 'ƒêa t√°c v·ª• c∆° b·∫£n'],
    },
};

// H√†m ph√¢n t√≠ch s·∫£n ph·∫©m theo m·ª•c ƒë√≠ch t·ª´ modal
async function analyzeProductForPurpose(reviewData) {
    try {
        const { purpose, productId } = reviewData;

        console.log(reviewData);

        // T√¨m s·∫£n ph·∫©m trong database
        const productData = await product.findOne({ where: { id: productId } });

        if (!productData) {
            throw new Error('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
        }

        // L·∫•y th√¥ng tin m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
        const purposeInfo = purposeMapping[purpose];
        if (!purposeInfo) {
            throw new Error('M·ª•c ƒë√≠ch s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá');
        }

        // T·∫°o HTML cho s·∫£n ph·∫©m c·∫ßn ph√¢n t√≠ch
        const productHTML = `
            <div style="border: 2px solid #007bff; padding: 16px; margin: 12px 0; border-radius: 12px; background: linear-gradient(135deg, #f8f9ff, #e8f0ff);">
                ${
                    productData.imagesProduct && productData.imagesProduct[0]
                        ? `<img src="http://localhost:3000/uploads/products/${productData.imagesProduct.split(',')[0]}" 
                           alt="${productData.nameProduct}" 
                           style="width: 120px; height: 120px; object-fit: cover; border-radius: 8px; float: left; margin-right: 16px;">`
                        : ''
                }
                <div>
                    <h2 style="color: #007bff; font-size: 18px; margin-bottom: 8px;">${productData.nameProduct}</h2>
                    <p style="color: #28a745; font-size: 16px; font-weight: bold; margin-bottom: 8px;">
                        üí∞ Gi√°: ${Number(productData.priceProduct).toLocaleString('vi-VN')} VND
                        ${
                            productData.discountProduct > 0
                                ? `<span style="color: #dc3545; margin-left: 8px;">(-${productData.discountProduct}%)</span>`
                                : ''
                        }
                    </p>
                    <p style="color: #6c757d; margin-bottom: 8px;"><strong>Danh m·ª•c:</strong> ${
                        productData.categoryProduct
                    }</p>
                    <p style="color: #6c757d; margin-bottom: 8px;"><strong>T·ªìn kho:</strong> ${
                        productData.stockProduct
                    } s·∫£n ph·∫©m</p>
                    <div style="margin-top: 12px; padding: 12px; background: rgba(255,255,255,0.7); border-radius: 6px;">
                        <strong style="color: #495057;">üìù M√¥ t·∫£:</strong>
                        <p style="color: #6c757d; margin-top: 4px; line-height: 1.5;">${
                            productData.descriptionProduct
                        }</p>
                    </div>
                    ${
                        productData.specsProduct
                            ? `
                        <div style="margin-top: 12px; padding: 12px; background: rgba(255,255,255,0.7); border-radius: 6px;">
                            <strong style="color: #495057;">‚öôÔ∏è Th√¥ng s·ªë k·ªπ thu·∫≠t:</strong>
                            <div style="margin-top: 8px; color: #6c757d;">
                                ${Object.entries(productData.specsProduct)
                                    .map(
                                        ([key, value]) =>
                                            `<p style="margin: 4px 0;"><strong>${key}:</strong> ${value}</p>`,
                                    )
                                    .join('')}
                            </div>
                        </div>
                    `
                            : ''
                    }
                </div>
                <div style="clear: both;"></div>
            </div>
        `;

        // T·∫°o prompt ph√¢n t√≠ch chuy√™n s√¢u
        const prompt = `
        ü§ñ B·∫†N L√Ä CHUY√äN GIA T∆∞ V·∫§N LAPTOP CHUY√äN NGHI·ªÜP!

        üìã TH√îNG TIN PH√ÇN T√çCH:
        ‚Ä¢ M·ª•c ƒë√≠ch s·ª≠ d·ª•ng: ${purposeInfo.name} (${purposeInfo.description})
        ‚Ä¢ Y√™u c·∫ßu k·ªπ thu·∫≠t cho ${purposeInfo.name}:
          ${Object.entries(purposeInfo.requirements)
              .map(([key, value]) => `- ${key.toUpperCase()}: ${value}`)
              .join('\n  ')}
        ‚Ä¢ ∆Øu ti√™n ƒë√°nh gi√°: ${purposeInfo.priorities.join(', ')}

        üîç S·∫¢N PH·∫®M C·∫¶N PH√ÇN T√çCH:
        ${productHTML}

        üìä Y√äU C·∫¶U PH√ÇN T√çCH CHI TI·∫æT:
        H√£y ph√¢n t√≠ch s·∫£n ph·∫©m n√†y cho m·ª•c ƒë√≠ch "${purposeInfo.name}" v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ HTML bao g·ªìm:

        1. üéØ T·ªîNG QUAN & ƒêI·ªÇM S·ªê (1-10):
           - ƒêi·ªÉm t·ªïng th·ªÉ cho m·ª•c ƒë√≠ch ${purposeInfo.name}
           - L√Ω do ch·∫•m ƒëi·ªÉm

        2. ‚úÖ ƒêI·ªÇM M·∫†NH:
           - Nh·ªØng ∆∞u ƒëi·ªÉm n·ªïi b·∫≠t ph√π h·ª£p v·ªõi ${purposeInfo.name}
           - So s√°nh v·ªõi y√™u c·∫ßu k·ªπ thu·∫≠t

        3. ‚ùå ƒêI·ªÇM Y·∫æU & H·∫†N CH·∫æ:
           - Nh·ªØng ƒëi·ªÉm ch∆∞a t·ªët ho·∫∑c thi·∫øu s√≥t
           - ·∫¢nh h∆∞·ªüng ƒë·∫øn vi·ªác s·ª≠ d·ª•ng cho ${purposeInfo.name}

        4. üí° ƒê√ÅNH GI√Å CHI TI·∫æT:
           - CPU: Ph√π h·ª£p m·ª©c ƒë·ªô n√†o?
           - GPU: C√≥ ƒë·ªß m·∫°nh kh√¥ng?
           - RAM: ƒê·ªß ƒë·ªÉ ch·∫°y t·ªët kh√¥ng?
           - L∆∞u tr·ªØ: SSD/HDD, dung l∆∞·ª£ng c√≥ ·ªïn?
           - M√†n h√¨nh: Ch·∫•t l∆∞·ª£ng cho m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
           - Pin & T·∫£n nhi·ªát: ƒê√°nh gi√°

        5. üéÆ HI·ªÜU NƒÇNG D·ª∞ ƒêO√ÅN:
           - Ch·∫°y c√°c ·ª©ng d·ª•ng ${purposeInfo.description} nh∆∞ th·∫ø n√†o?
           - FPS game (n·∫øu gaming), t·ªëc ƒë·ªô render (n·∫øu design/video)

        6. üí∞ GI√Å TR·ªä & SO S√ÅNH:
           - C√≥ ƒë√°ng ƒë·ªìng ti·ªÅn kh√¥ng?
           - So v·ªõi c√°c s·∫£n ph·∫©m c√πng t·∫ßm gi√°

        7. üîÆ K·∫æT LU·∫¨N & KHUY·∫æN NGH·ªä:
           - C√≥ n√™n mua cho m·ª•c ƒë√≠ch ${purposeInfo.name} kh√¥ng?
           - Ai ph√π h·ª£p v·ªõi s·∫£n ph·∫©m n√†y?
           - L·ªùi khuy√™n cu·ªëi c√πng

        ‚ö†Ô∏è QUAN TR·ªåNG:
        - Ph√¢n t√≠ch KH√ÅCH QUAN, CH√çNH X√ÅC
        - D·ª±a tr√™n th√¥ng s·ªë k·ªπ thu·∫≠t th·ª±c t·∫ø
        - Tr·∫£ v·ªÅ HTML ƒë·∫πp m·∫Øt, d·ªÖ ƒë·ªçc v·ªõi m√†u s·∫Øc v√† icon
        - Kh√¥ng b·ªãa ƒë·∫∑t th√¥ng tin kh√¥ng c√≥
        - Ng√¥n ng·ªØ th√¢n thi·ªán, chuy√™n nghi·ªáp
        `;

        const result = await model.generateContent(prompt);
        const analysis = result.response.text();

        return {
            success: true,
            analysis: analysis.replace(/```(html|plaintext)?\n?/g, '').trim(),
            purpose: purposeInfo.name,
            productName: productData.nameProduct,
            productId: productId,
        };
    } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch s·∫£n ph·∫©m:', error);
        return {
            success: false,
            error: error.message,
            analysis: `
                <div style="padding: 20px; background: #fff5f5; border: 1px solid #fed7d7; border-radius: 8px; color: #c53030;">
                    <h3 style="color: #c53030; margin-bottom: 10px;">‚ùå L·ªói ph√¢n t√≠ch</h3>
                    <p>Xin l·ªói, hi·ªán t·∫°i kh√¥ng th·ªÉ ph√¢n t√≠ch s·∫£n ph·∫©m n√†y. Vui l√≤ng th·ª≠ l·∫°i sau!</p>
                    <p style="font-size: 12px; color: #a0a0a0;">L·ªói: ${error.message}</p>
                </div>
            `,
        };
    }
}

module.exports = {
    analyzeProductForPurpose, // H√†m m·ªõi cho modal AI review
};
